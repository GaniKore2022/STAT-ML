# -*- coding: utf-8 -*-
"""Apple Stock Price Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iJGp6JXxJW_OBswDKshwhAOtfiQ8Mzxa
"""

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

import pandas as pd
import numpy as np
import math
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.preprocessing import StandardScaler

data=pd.read_csv("Apple.csv")

data

data.head()

data.isnull().sum()

data.shape

x1=data['Open']
y=data['Adj Close']

plt.plot(x1,y)

x2=data['High']
y=data['Adj Close']

plt.plot(x2,y)

x3=data['Low']
y=data['Adj Close']

plt.plot(x3,y)

x4=data['Close']
y=data['Adj Close']

plt.plot(x4,y)

x5=data['Volume']
y=data['Adj Close']

plt.plot(x5,y)

y = data['Adj Close']
x=data['Close']
n = len(data)
yp=[]
def mse(b0,b1):
  for i in range (0,n):
    y_bar =(b1*x[i])+b0
    dif =(y[i]-y_bar)**2 
    yp.append(dif)
  ypp=np.array(yp)
  MSE = np.mean(ypp)
  print("The Mean Square Error for b0=",b0,"b1=", b1,"is: ",MSE)
for i in range(0,100):
  mse(i,i+1)

x=data.drop(['Adj Close'],axis=1)
print(x)

y=data['Adj Close']
print(y)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=True)

lin_reg_model=LinearRegression()

reg=lin_reg_model.fit(x_train,y_train)

w=reg.score(x_test,y_test)

reg.score(x_train,y_train)

train_prediction=lin_reg_model.predict(x_train)

error_score=metrics.r2_score(y_train,train_prediction)
print(error_score)

from sklearn import linear_model
lasso_reg=linear_model.Lasso(alpha=50,max_iter=100,tol=0.1)
lasso_reg.fit(x_train,y_train)

j=lasso_reg.score(x_test,y_test)
trainl_prediction=lasso_reg.predict(x_train)
error2_score=metrics.r2_score(y_train,trainl_prediction)
print(error2_score)

jj=lasso_reg.score(x_train,y_train)

from sklearn.linear_model import Ridge
Ridge_reg=linear_model.Ridge(alpha=50,max_iter=100,tol=0.1)
Ridge_reg.fit(x_train,y_train)
trainr_prediction=Ridge_reg.predict(x_train)
error_scorer=metrics.r2_score(y_train,trainr_prediction)
print(error_scorer)
ff=Ridge_reg.score(x_train,y_train)

ll=Ridge_reg.score(x_test,y_test)
